{
  "version": 3,
  "sources": ["src/content/examples/dynamic-form/src/app/dynamic-form-question.component.ts", "src/content/examples/dynamic-form/src/app/dynamic-form-question.component.html"],
  "sourcesContent": ["// #docregion\nimport {Component, input, Input} from '@angular/core';\nimport {FormGroup, ReactiveFormsModule} from '@angular/forms';\n\nimport {QuestionBase} from './question-base';\n\n@Component({\n  selector: 'app-question',\n  templateUrl: './dynamic-form-question.component.html',\n  imports: [ReactiveFormsModule],\n})\nexport class DynamicFormQuestionComponent {\n  readonly question = input.required<QuestionBase<string>>();\n  readonly form = input.required<FormGroup>();\n\n  get isValid() {\n    return this.form().controls[this.question().key].valid;\n  }\n}\n", "<!-- #docregion -->\n<div [formGroup]=\"form()\">\n  <label [attr.for]=\"question().key\">{{ question().label }}</label>\n\n  <div>\n    @switch (question().controlType) {\n      @case ('textbox') {\n        <input [formControlName]=\"question().key\" [id]=\"question().key\" [type]=\"question().type\" />\n      }\n      @case ('dropdown') {\n        <select [id]=\"question().key\" [formControlName]=\"question().key\">\n          @for (opt of question().options; track opt) {\n            <option [value]=\"opt.key\">{{ opt.value }}</option>\n          }\n        </select>\n      }\n    }\n  </div>\n\n  @if (!isValid) {\n    <div class=\"errorMessage\">{{ question().label }} is required</div>\n  }\n</div>\n"],
  "mappings": "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",
  "names": []
}
