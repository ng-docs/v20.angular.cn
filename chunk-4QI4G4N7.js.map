{
  "version": 3,
  "sources": ["src/app/editor/constants.ts", "src/app/editor/embedded-tutorial-manager.service.ts"],
  "sourcesContent": ["/*!\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\nexport const TUTORIALS_ASSETS_WEB_PATH = '/assets/tutorials';\n\nexport const TUTORIALS_ASSETS_SOURCE_CODE_DIRECTORY = 'source-code';\nexport const TUTORIALS_ASSETS_METADATA_DIRECTORY = 'metadata';\n\nexport const TUTORIALS_SOURCE_CODE_WEB_PATH = `${TUTORIALS_ASSETS_WEB_PATH}/${TUTORIALS_ASSETS_SOURCE_CODE_DIRECTORY}`;\nexport const TUTORIALS_METADATA_WEB_PATH = `${TUTORIALS_ASSETS_WEB_PATH}/${TUTORIALS_ASSETS_METADATA_DIRECTORY}`;\n\nexport const TUTORIALS_COMMON_DIRECTORY = 'common';\n", "/*!\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Injectable, signal} from '@angular/core';\nimport {FileSystemTree} from '@webcontainer/api';\nimport {BehaviorSubject} from 'rxjs';\n\nimport {TutorialMetadata} from '@angular/docs';\nimport {TUTORIALS_ASSETS_WEB_PATH} from './constants';\n\n/**\n * A service responsible for the current tutorial, retrieving and providing\n * its source code and metadata.\n */\n@Injectable({providedIn: 'root'})\nexport class EmbeddedTutorialManager {\n  readonly tutorialId = signal<string>('');\n  readonly tutorialFilesystemTree = signal<FileSystemTree | null>(null);\n  readonly commonFilesystemTree = signal<FileSystemTree | null>(null);\n\n  readonly type = signal<TutorialMetadata['type'] | undefined>(undefined);\n\n  private readonly allFiles = signal<TutorialMetadata['allFiles']>([]);\n\n  readonly hiddenFiles = signal<TutorialMetadata['hiddenFiles']>([]);\n  readonly tutorialFiles = signal<TutorialMetadata['tutorialFiles']>({});\n  readonly openFiles = signal<TutorialMetadata['openFiles']>([]);\n\n  readonly answerFiles = signal<NonNullable<TutorialMetadata['answerFiles']>>({});\n\n  readonly dependencies = signal<TutorialMetadata['dependencies'] | undefined>(undefined);\n  private _shouldReInstallDependencies = signal<boolean>(false);\n  readonly shouldReInstallDependencies = this._shouldReInstallDependencies.asReadonly();\n\n  private metadata = signal<TutorialMetadata | undefined>(undefined);\n\n  private _shouldChangeTutorial$ = new BehaviorSubject<boolean>(false);\n  readonly tutorialChanged$ = this._shouldChangeTutorial$.asObservable();\n\n  private readonly _filesToDeleteFromPreviousProject = signal(new Set<string>());\n  readonly filesToDeleteFromPreviousProject = this._filesToDeleteFromPreviousProject.asReadonly();\n\n  async fetchAndSetTutorialFiles(tutorial: string) {\n    const [commonSourceCode, tutorialSourceCode, metadata] = await Promise.all([\n      this.fetchCommonFiles(),\n      this.fetchTutorialSourceCode(tutorial),\n      this.fetchTutorialMetadata(tutorial),\n    ]);\n\n    const projectChanged = !!this.tutorialId() && this.tutorialId() !== tutorial;\n\n    this.tutorialId.set(tutorial);\n    this.type.set(metadata.type);\n\n    this.metadata.set(metadata);\n\n    if (tutorialSourceCode) {\n      if (projectChanged) {\n        const filesToRemove = this.computeFilesToRemove(metadata.allFiles, this.allFiles());\n        if (filesToRemove) {\n          this._filesToDeleteFromPreviousProject.set(filesToRemove);\n        }\n\n        this._shouldReInstallDependencies.set(\n          this.checkIfDependenciesChanged(metadata.dependencies ?? {}),\n        );\n      }\n\n      this.tutorialFilesystemTree.set(tutorialSourceCode);\n      this.dependencies.set(metadata.dependencies ?? {});\n\n      this.tutorialFiles.set(metadata.tutorialFiles);\n      this.answerFiles.set(metadata.answerFiles ?? {});\n      this.openFiles.set(metadata.openFiles);\n      this.hiddenFiles.set(metadata.hiddenFiles);\n      this.allFiles.set(metadata.allFiles);\n\n      // set common only once\n      if (!this.commonFilesystemTree()) this.commonFilesystemTree.set(commonSourceCode);\n    }\n\n    this._shouldChangeTutorial$.next(projectChanged);\n  }\n\n  revealAnswer() {\n    const answerFilenames = Object.keys(this.answerFiles());\n\n    const openFilesAndAnswer = Array.from(\n      // use Set to remove duplicates, spread openFiles first to keep files order\n      new Set([...this.openFiles(), ...answerFilenames]),\n    ).filter((filename) => !this.hiddenFiles()?.includes(filename));\n\n    const tutorialFiles = Object.fromEntries(\n      openFilesAndAnswer.map((file) => [file, this.answerFiles()[file]]),\n    );\n\n    const allFilesWithAnswer = [...this.allFiles(), ...answerFilenames];\n\n    const filesToDelete = this.computeFilesToRemove(allFilesWithAnswer, this.allFiles());\n\n    if (filesToDelete) {\n      this._filesToDeleteFromPreviousProject.set(filesToDelete);\n    }\n\n    this.allFiles.set(allFilesWithAnswer);\n    this.tutorialFiles.set(tutorialFiles);\n    this.openFiles.set(openFilesAndAnswer);\n    this._shouldChangeTutorial$.next(true);\n  }\n\n  resetRevealAnswer() {\n    const allFilesWithoutAnswer = this.metadata()!.allFiles;\n    const filesToDelete = this.computeFilesToRemove(allFilesWithoutAnswer, this.allFiles());\n\n    if (filesToDelete) {\n      this._filesToDeleteFromPreviousProject.set(filesToDelete);\n    }\n\n    this.tutorialFiles.set(this.metadata()!.tutorialFiles);\n    this.openFiles.set(this.metadata()!.openFiles);\n    this._shouldChangeTutorial$.next(true);\n  }\n\n  async fetchCommonFiles(): Promise<FileSystemTree> {\n    if (this.commonFilesystemTree() !== null) return this.commonFilesystemTree() as FileSystemTree;\n\n    //const commonFiles = await this.fetchTutorialSourceCode(TUTORIALS_COMMON_DIRECTORY);\n\n    //this.tutorialFilesystemTree.set(commonFiles);\n\n    return {};\n  }\n\n  private async fetchTutorialSourceCode(tutorial: string): Promise<FileSystemTree> {\n    const tutorialSourceCode = await fetch(\n      `${TUTORIALS_ASSETS_WEB_PATH}/${tutorial}/source-code.json`,\n    );\n\n    if (!tutorialSourceCode.ok) throw new Error(`缺少教程 ${tutorial} 的源代码。`);\n\n    return await tutorialSourceCode.json();\n  }\n\n  private async fetchTutorialMetadata(tutorial: string): Promise<TutorialMetadata> {\n    const tutorialSourceCode = await fetch(\n      `${TUTORIALS_ASSETS_WEB_PATH}/${tutorial}/metadata.json`,\n    );\n\n    if (!tutorialSourceCode.ok) throw new Error(`缺少教程 ${tutorial} 的元数据。`);\n\n    return await tutorialSourceCode.json();\n  }\n\n  /**\n   * Compare previous and new dependencies to determine if the dependencies changed.\n   */\n  private checkIfDependenciesChanged(\n    newDeps: NonNullable<TutorialMetadata['dependencies']>,\n  ): boolean {\n    const existingDeps = this.dependencies();\n\n    for (const name of Object.keys(newDeps)) {\n      if (existingDeps?.[name] !== newDeps[name]) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  private computeFilesToRemove(\n    newFiles: TutorialMetadata['allFiles'],\n    existingFiles: TutorialMetadata['allFiles'],\n  ): Set<string> | undefined {\n    // All existing files are candidates for removal.\n    const filesToDelete = new Set(existingFiles);\n\n    // Retain files that are present in the new project.\n    for (const file of newFiles) {\n      filesToDelete.delete(file);\n    }\n\n    return filesToDelete;\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
