{
  "version": 3,
  "sources": ["src/content/examples/dynamic-form/src/app/question-base.ts", "src/content/examples/dynamic-form/src/app/question-dropdown.ts", "src/content/examples/dynamic-form/src/app/question-textbox.ts", "src/content/examples/dynamic-form/src/app/question.service.ts", "src/content/examples/dynamic-form/src/app/app.component.ts"],
  "sourcesContent": ["// #docregion\nexport class QuestionBase<T> {\n  value: T | undefined;\n  key: string;\n  label: string;\n  required: boolean;\n  order: number;\n  controlType: string;\n  type: string;\n  options: {key: string; value: string}[];\n\n  constructor(\n    options: {\n      value?: T;\n      key?: string;\n      label?: string;\n      required?: boolean;\n      order?: number;\n      controlType?: string;\n      type?: string;\n      options?: {key: string; value: string}[];\n    } = {},\n  ) {\n    this.value = options.value;\n    this.key = options.key || '';\n    this.label = options.label || '';\n    this.required = !!options.required;\n    this.order = options.order === undefined ? 1 : options.order;\n    this.controlType = options.controlType || '';\n    this.type = options.type || '';\n    this.options = options.options || [];\n  }\n}\n", "// #docregion\nimport {QuestionBase} from './question-base';\n\nexport class DropdownQuestion extends QuestionBase<string> {\n  override controlType = 'dropdown';\n}\n", "// #docregion\nimport {QuestionBase} from './question-base';\n\nexport class TextboxQuestion extends QuestionBase<string> {\n  override controlType = 'textbox';\n}\n", "// #docregion\nimport {Injectable} from '@angular/core';\n\nimport {DropdownQuestion} from './question-dropdown';\nimport {QuestionBase} from './question-base';\nimport {TextboxQuestion} from './question-textbox';\nimport {of} from 'rxjs';\n\n@Injectable()\nexport class QuestionService {\n  // TODO: get from a remote source of question metadata\n  getQuestions() {\n    const questions: QuestionBase<string>[] = [\n      new DropdownQuestion({\n        key: 'favoriteAnimal',\n        label: 'Favorite Animal',\n        options: [\n          {key: 'cat', value: 'Cat'},\n          {key: 'dog', value: 'Dog'},\n          {key: 'horse', value: 'Horse'},\n          {key: 'capybara', value: 'Capybara'},\n        ],\n        order: 3,\n      }),\n\n      new TextboxQuestion({\n        key: 'firstName',\n        label: 'First name',\n        value: 'Alex',\n        required: true,\n        order: 1,\n      }),\n\n      new TextboxQuestion({\n        key: 'emailAddress',\n        label: 'Email',\n        type: 'email',\n        order: 2,\n      }),\n    ];\n\n    return of(questions.sort((a, b) => a.order - b.order));\n  }\n}\n", "// #docregion\nimport {Component, inject} from '@angular/core';\nimport {AsyncPipe} from '@angular/common';\n\nimport {DynamicFormComponent} from './dynamic-form.component';\n\nimport {QuestionService} from './question.service';\nimport {QuestionBase} from './question-base';\nimport {Observable} from 'rxjs';\n\n@Component({\n  selector: 'app-root',\n  template: `\n    <div>\n      <h2>Job Application for Heroes</h2>\n      <app-dynamic-form [questions]=\"questions$ | async\" />\n    </div>\n  `,\n  providers: [QuestionService],\n  imports: [AsyncPipe, DynamicFormComponent],\n})\nexport class AppComponent {\n  questions$: Observable<QuestionBase<string>[]> = inject(QuestionService).getQuestions();\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACM,IAAO,gBAAP,MAAO,cAAY;EACvB;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA,YACE,UASI,CAAA,GAAE;AAEN,SAAK,QAAQ,QAAQ;AACrB,SAAK,MAAM,QAAQ,OAAO;AAC1B,SAAK,QAAQ,QAAQ,SAAS;AAC9B,SAAK,WAAW,CAAC,CAAC,QAAQ;AAC1B,SAAK,QAAQ,QAAQ,UAAU,SAAY,IAAI,QAAQ;AACvD,SAAK,cAAc,QAAQ,eAAe;AAC1C,SAAK,OAAO,QAAQ,QAAQ;AAC5B,SAAK,UAAU,QAAQ,WAAW,CAAA;EACpC;;AA9BuB;AAAnB,IAAO,eAAP;;;ACEA,IAAO,oBAAP,MAAO,0BAAyB,aAAoB;EAC/C,cAAc;;AADiC;AAApD,IAAO,mBAAP;;;ACAA,IAAO,mBAAP,MAAO,yBAAwB,aAAoB;EAC9C,cAAc;;AADgC;AAAnD,IAAO,kBAAP;;;ACMA,IAAO,mBAAP,MAAO,iBAAe;;EAE1B,eAAY;AACV,UAAM,YAAoC;MACxC,IAAI,iBAAiB;QACnB,KAAK;QACL,OAAO;QACP,SAAS;UACP,EAAC,KAAK,OAAO,OAAO,MAAK;UACzB,EAAC,KAAK,OAAO,OAAO,MAAK;UACzB,EAAC,KAAK,SAAS,OAAO,QAAO;UAC7B,EAAC,KAAK,YAAY,OAAO,WAAU;;QAErC,OAAO;OACR;MAED,IAAI,gBAAgB;QAClB,KAAK;QACL,OAAO;QACP,OAAO;QACP,UAAU;QACV,OAAO;OACR;MAED,IAAI,gBAAgB;QAClB,KAAK;QACL,OAAO;QACP,MAAM;QACN,OAAO;OACR;;AAGH,WAAO,GAAG,UAAU,KAAK,CAAC,GAAG,MAAM,EAAE,QAAQ,EAAE,KAAK,CAAC;EACvD;;AAjC0B;cAAf;mCAAA,kBAAe;AAAA;cAAf,sFAAA,kBAAe,SAAf,iBAAe,UAAA,CAAA;AAAtB,IAAO,kBAAP;;sEAAO,iBAAe,CAAA;UAD3B;;;;;ACaK,IAAO,gBAAP,MAAO,cAAY;EACvB,aAAiD,OAAO,eAAe,EAAE,aAAY;;AAD9D;cAAZ;mCAAA,eAAY;AAAA;cAAZ,gFAAA,eAAY,WAAA,CAAA,CAAA,UAAA,CAAA,GAAA,UAAA,CAAA,6BAHZ,CAAC,eAAe,CAAC,CAAA,GAAA,OAAA,GAAA,MAAA,GAAA,QAAA,CAAA,CAAA,GAAA,WAAA,CAAA,GAAA,UAAA,gCAAA,sBAAA,IAAA,KAAA;AAAA,MAAA,KAAA,GAAA;AAL1B,IAAA,yBAAA,GAAA,KAAA,EAAK,GAAA,IAAA;AACC,IAAA,iBAAA,GAAA,4BAAA;AAA0B,IAAA,uBAAA;AAC9B,IAAA,oBAAA,GAAA,oBAAA,CAAA;;AACF,IAAA,uBAAA;;;AADoB,IAAA,oBAAA,CAAA;AAAA,IAAA,qBAAA,aAAA,sBAAA,GAAA,GAAA,IAAA,UAAA,CAAA;;GAGM,yCACP,sBAAX,SAAS,GAAA,eAAA,EAAA,CAAA;AAEf,IAAO,eAAP;;sEAAO,cAAY,CAAA;UAXxB;WAAU;MACT,UAAU;MACV,UAAU;;;;;;MAMV,WAAW,CAAC,eAAe;MAC3B,SAAS,CAAC,WAAW,oBAAoB;KAC1C;;;;6EACY,cAAY,EAAA,WAAA,gBAAA,UAAA,8DAAA,YAAA,GAAA,CAAA;AAAA,GAAA;",
  "names": []
}
