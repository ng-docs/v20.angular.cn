{"type":"editor","openFiles":["src/app/app.ts","src/app/app.css"],"allFiles":["BUILD.bazel","angular.json","package-lock.json","package.json.template","tsconfig.app.json","tsconfig.json","src/favicon.ico","src/index.html","src/main.ts","src/styles.css","src/assets/angular.svg","src/app/app.config.ts","package.json","idx/dev.nix","config.json","src/app/app.css","src/app/app.ts","answer/src/app/app.css","answer/src/app/app.ts"],"tutorialFiles":{"src/app/app.ts":"import {Component, signal, computed, ChangeDetectionStrategy} from '@angular/core';\n\n// TODO: Import effect from @angular/core\n\n@Component({\n  selector: 'app-root',\n  template: `\n    <div [class]=\"themeClass()\">\n      <h2>Theme Manager with Effects</h2>\n      \n      <div class=\"controls\">\n        <button (click)=\"toggleTheme()\">\n          Switch to \n          @if (theme() === 'light') {\n            Dark\n          } @else {\n            Light\n          } Theme\n        </button>\n        \n        @if (!isLoggedIn()) {\n          <button (click)=\"login()\">Login</button>\n        } @else {\n          <button (click)=\"logout()\">Logout</button>\n        }\n      </div>\n      \n      <div class=\"info\">\n        <p>Current theme: {{ theme() }}</p>\n        <p>User: {{ username() }}</p>\n        <p>Status: \n          @if (isLoggedIn()) {\n            Logged in\n          } @else {\n            Logged out\n          }\n        </p>\n      </div>\n      \n      <div class=\"demo\">\n        <p>Open the browser console to see the effects in action!</p>\n        <p>Effects will automatically:</p>\n        <ul>\n          <li>Save theme to localStorage</li>\n          <li>Log user activity changes</li>\n          <li>Run a timer every 5 seconds</li>\n        </ul>\n      </div>\n    </div>\n  `,\n  styleUrl: './app.css',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class App {\n  theme = signal<'light' | 'dark'>('light');\n  username = signal('Guest');\n  isLoggedIn = signal(false);\n\n  themeClass = computed(() => `theme-${this.theme()}`);\n\n  constructor() {\n    // TODO: Create effect to save theme to localStorage\n    // Use localStorage.setItem('theme', this.theme()) and console.log\n    // TODO: Create effect to log user activity changes\n    // Read both isLoggedIn() and username() signals and console.log the status\n    // TODO: Create effect with cleanup for timer\n    // Use setInterval to log every 5 seconds, and onCleanup to clear the interval\n  }\n\n  toggleTheme() {\n    this.theme.set(this.theme() === 'light' ? 'dark' : 'light');\n  }\n\n  login() {\n    this.username.set('John Doe');\n    this.isLoggedIn.set(true);\n  }\n\n  logout() {\n    this.username.set('Guest');\n    this.isLoggedIn.set(false);\n  }\n}\n","src/app/app.css":":host {\n  font-family: Arial, sans-serif;\n  display: block;\n  padding: 20px;\n  transition: all 0.3s ease;\n}\n\n.theme-light {\n  background-color: #ffffff;\n  color: #333333;\n}\n\n.theme-dark {\n  background-color: #1a1a1a;\n  color: #ffffff;\n}\n\n.controls {\n  margin-bottom: 20px;\n}\n\nbutton {\n  margin: 0 10px 10px 0;\n  padding: 8px 16px;\n  font-size: 16px;\n  cursor: pointer;\n  border: 1px solid #ccc;\n  border-radius: 4px;\n  transition: all 0.2s ease;\n}\n\n.theme-light button {\n  background-color: #f5f5f5;\n  color: #333;\n}\n\n.theme-dark button {\n  background-color: #333;\n  color: #fff;\n  border-color: #555;\n}\n\n.info {\n  margin: 20px 0;\n  padding: 15px;\n  border-radius: 4px;\n}\n\n.theme-light .info {\n  background-color: #f9f9f9;\n  border: 1px solid #e0e0e0;\n}\n\n.theme-dark .info {\n  background-color: #2a2a2a;\n  border: 1px solid #444;\n}\n\n.demo {\n  margin-top: 20px;\n  padding: 15px;\n  border-radius: 4px;\n}\n\n.theme-light .demo {\n  background-color: #e3f2fd;\n  border: 1px solid #bbdefb;\n}\n\n.theme-dark .demo {\n  background-color: #1e3a8a;\n  border: 1px solid #3b82f6;\n}"},"answerFiles":{"src/app/app.css":":host {\n  font-family: Arial, sans-serif;\n  display: block;\n  padding: 20px;\n  transition: all 0.3s ease;\n}\n\n.theme-light {\n  background-color: #ffffff;\n  color: #333333;\n}\n\n.theme-dark {\n  background-color: #1a1a1a;\n  color: #ffffff;\n}\n\n.controls {\n  margin-bottom: 20px;\n}\n\nbutton {\n  margin: 0 10px 10px 0;\n  padding: 8px 16px;\n  font-size: 16px;\n  cursor: pointer;\n  border: 1px solid #ccc;\n  border-radius: 4px;\n  transition: all 0.2s ease;\n}\n\n.theme-light button {\n  background-color: #f5f5f5;\n  color: #333;\n}\n\n.theme-dark button {\n  background-color: #333;\n  color: #fff;\n  border-color: #555;\n}\n\n.info {\n  margin: 20px 0;\n  padding: 15px;\n  border-radius: 4px;\n}\n\n.theme-light .info {\n  background-color: #f9f9f9;\n  border: 1px solid #e0e0e0;\n}\n\n.theme-dark .info {\n  background-color: #2a2a2a;\n  border: 1px solid #444;\n}\n\n.demo {\n  margin-top: 20px;\n  padding: 15px;\n  border-radius: 4px;\n}\n\n.theme-light .demo {\n  background-color: #e3f2fd;\n  border: 1px solid #bbdefb;\n}\n\n.theme-dark .demo {\n  background-color: #1e3a8a;\n  border: 1px solid #3b82f6;\n}","src/app/app.ts":"import {Component, signal, computed, effect, ChangeDetectionStrategy} from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  template: `\n    <div [class]=\"themeClass()\">\n      <h2>Theme Manager with Effects</h2>\n      \n      <div class=\"controls\">\n        <button (click)=\"toggleTheme()\">\n          Switch to \n          @if (theme() === 'light') {\n            Dark\n          } @else {\n            Light\n          } Theme\n        </button>\n        \n        @if (!isLoggedIn()) {\n          <button (click)=\"login()\">Login</button>\n        } @else {\n          <button (click)=\"logout()\">Logout</button>\n        }\n      </div>\n      \n      <div class=\"info\">\n        <p>Current theme: {{ theme() }}</p>\n        <p>User: {{ username() }}</p>\n        <p>Status: \n          @if (isLoggedIn()) {\n            Logged in\n          } @else {\n            Logged out\n          }\n        </p>\n      </div>\n      \n      <div class=\"demo\">\n        <p>Open the browser console to see the effects in action!</p>\n        <p>Effects are automatically:</p>\n        <ul>\n          <li>Saving theme to localStorage</li>\n          <li>Logging user activity changes</li>\n          <li>Running a timer every 5 seconds</li>\n        </ul>\n      </div>\n    </div>\n  `,\n  styleUrl: './app.css',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class App {\n  theme = signal<'light' | 'dark'>('light');\n  username = signal('Guest');\n  isLoggedIn = signal(false);\n\n  themeClass = computed(() => `theme-${this.theme()}`);\n\n  constructor() {\n    // Save theme to localStorage whenever it changes\n    effect(() => {\n      localStorage.setItem('theme', this.theme());\n      console.log('Theme saved to localStorage:', this.theme());\n    });\n\n    // Log user activity changes\n    effect(() => {\n      const status = this.isLoggedIn() ? 'logged in' : 'logged out';\n      const user = this.username();\n      console.log(`User ${user} is ${status}`);\n    });\n\n    // Timer effect with cleanup\n    effect((onCleanup) => {\n      const interval = setInterval(() => {\n        console.log('Timer tick - Current theme:', this.theme());\n      }, 5000);\n\n      // Clean up the interval when the effect is destroyed\n      onCleanup(() => {\n        clearInterval(interval);\n        console.log('Timer cleaned up');\n      });\n    });\n  }\n\n  toggleTheme() {\n    this.theme.set(this.theme() === 'light' ? 'dark' : 'light');\n  }\n\n  login() {\n    this.username.set('John Doe');\n    this.isLoggedIn.set(true);\n  }\n\n  logout() {\n    this.username.set('Guest');\n    this.isLoggedIn.set(false);\n  }\n}\n"},"hiddenFiles":["BUILD.bazel","angular.json","package-lock.json","package.json.template","tsconfig.app.json","tsconfig.json","src/favicon.ico","src/index.html","src/main.ts","src/styles.css","src/assets/angular.svg","src/app/app.config.ts","package.json","idx/dev.nix","config.json","answer/src/app/app.css","answer/src/app/app.ts"],"dependencies":{"@angular/common":"^20.1.0-next","@angular/compiler":"^20.1.0-next","@angular/core":"^20.1.0-next","@angular/forms":"^20.1.0-next","@angular/platform-browser":"^20.1.0-next","@angular/router":"^20.1.0-next","rxjs":"~7.8.0","tslib":"^2.3.0","zone.js":"~0.15.1","@angular/build":"^20.1.0-next","@angular/cli":"^20.1.0-next","@angular/compiler-cli":"^20.1.0-next","typescript":"~5.8.2"}}