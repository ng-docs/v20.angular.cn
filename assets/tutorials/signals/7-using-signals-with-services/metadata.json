{"type":"editor","openFiles":["src/app/app.ts","src/app/cart-store.ts","src/app/cart-display.ts","src/app/cart-types.ts","src/app/app.css"],"allFiles":["BUILD.bazel","angular.json","package-lock.json","package.json.template","tsconfig.app.json","tsconfig.json","src/favicon.ico","src/index.html","src/main.ts","src/styles.css","src/assets/angular.svg","src/app/app.config.ts","package.json","idx/dev.nix","config.json","src/app/app.css","src/app/app.ts","src/app/cart-display.ts","src/app/cart-store.ts","src/app/cart-types.ts","answer/src/app/app.css","answer/src/app/app.ts","answer/src/app/cart-display.ts","answer/src/app/cart-store.ts","answer/src/app/cart-types.ts"],"tutorialFiles":{"src/app/app.ts":"import {Component, ChangeDetectionStrategy} from '@angular/core';\n\n// TODO: Import inject from @angular/core\n// TODO: Import CartStore from './cart-store'\n// TODO: Import CartDisplay from './cart-display'\n\n@Component({\n  selector: 'app-root',\n  // TODO: Add CartDisplay to imports array\n  template: `\n    <div class=\"shopping-app\">\n      <header>\n        <h1>Signals with Services Demo</h1>\n        <div class=\"cart-badge\">\n          Cart: Loading... items ($Loading...)\n        </div>\n      </header>\n      \n      <main>\n        <!-- TODO: Add cart-display component here -->\n      </main>\n    </div>\n  `,\n  styleUrl: './app.css',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class App {\n  // TODO: Inject CartStore using inject(CartStore)\n}\n","src/app/cart-store.ts":"import {Injectable, signal} from '@angular/core';\nimport {CartItem} from './cart-types';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CartStore {\n  private items = signal<CartItem[]>([]);\n\n  // TODO: Create readonly signal for cartItems using this.items.asReadonly()\n  // readonly cartItems = ???\n\n  // TODO: Create computed signal for totalQuantity\n  // readonly totalQuantity = computed(() => ???)\n\n  // TODO: Create computed signal for totalPrice\n  // readonly totalPrice = computed(() => ???)\n\n  addItem(id: string, name: string, price: number) {\n    this.items.update((currentItems) => {\n      const existingItem = currentItems.find((item) => item.id === id);\n\n      if (existingItem) {\n        return currentItems.map((item) =>\n          item.id === id ? {...item, quantity: item.quantity + 1} : item,\n        );\n      } else {\n        return [...currentItems, {id, name, price, quantity: 1}];\n      }\n    });\n  }\n\n  removeItem(id: string) {\n    this.items.update((currentItems) => currentItems.filter((item) => item.id !== id));\n  }\n\n  updateQuantity(id: string, quantity: number) {\n    if (quantity <= 0) {\n      this.removeItem(id);\n      return;\n    }\n\n    this.items.update((currentItems) =>\n      currentItems.map((item) => (item.id === id ? {...item, quantity} : item)),\n    );\n  }\n\n  clearCart() {\n    this.items.set([]);\n  }\n}\n","src/app/cart-display.ts":"import {Component, inject, ChangeDetectionStrategy} from '@angular/core';\nimport {CartStore} from './cart-store';\n\n@Component({\n  selector: 'cart-display',\n  template: `\n    <div class=\"cart-display\">\n      <h2>Shopping Cart Demo</h2>\n      \n      <!-- Add some products to test the cart -->\n      <div class=\"add-products\">\n        <h3>Add Products</h3>\n        <button (click)=\"addLaptop()\">Add Laptop ($999)</button>\n        <button (click)=\"addMouse()\">Add Mouse ($25)</button>\n        <button (click)=\"addKeyboard()\">Add Keyboard ($79)</button>\n      </div>\n      \n      <h3>Cart Contents</h3>\n      @if (cartStore.cartItems().length === 0) {\n        <p class=\"empty-message\">Your cart is empty</p>\n      } @else {\n        <div class=\"cart-items\">\n          @for (item of cartStore.cartItems(); track item.id) {\n            <div class=\"cart-item\">\n              <div class=\"item-info\">\n                <h4>{{ item.name }}</h4>\n                <p class=\"price\">\\${{ item.price }} each</p>\n              </div>\n              \n              <div class=\"quantity-controls\">\n                <button (click)=\"decreaseQuantity(item.id)\">-</button>\n                <span class=\"quantity\">{{ item.quantity }}</span>\n                <button (click)=\"increaseQuantity(item.id)\">+</button>\n                <button (click)=\"removeItem(item.id)\" class=\"remove\">Ã—</button>\n              </div>\n            </div>\n          }\n        </div>\n        \n        <div class=\"cart-summary\">\n          <p>Total Items: {{ cartStore.totalQuantity() }}</p>\n          <p class=\"total-price\">Total: \\${{ cartStore.totalPrice() }}</p>\n          <button (click)=\"clearCart()\" class=\"clear-btn\">Clear Cart</button>\n        </div>\n      }\n    </div>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CartDisplay {\n  cartStore = inject(CartStore);\n\n  addLaptop() {\n    this.cartStore.addItem('1', 'Laptop', 999);\n  }\n\n  addMouse() {\n    this.cartStore.addItem('2', 'Mouse', 25);\n  }\n\n  addKeyboard() {\n    this.cartStore.addItem('3', 'Keyboard', 79);\n  }\n\n  increaseQuantity(id: string) {\n    // TODO: Get current item from cartStore.cartItems()\n    // and call cartStore.updateQuantity() with quantity + 1\n  }\n\n  decreaseQuantity(id: string) {\n    // TODO: Get current item from cartStore.cartItems()\n    // and call cartStore.updateQuantity() with quantity - 1 (if > 1)\n  }\n\n  removeItem(id: string) {\n    this.cartStore.removeItem(id);\n  }\n\n  clearCart() {\n    this.cartStore.clearCart();\n  }\n}\n","src/app/cart-types.ts":"export interface CartItem {\n  id: string;\n  name: string;\n  price: number;\n  quantity: number;\n}\n","src/app/app.css":"/* ProductList Component Styles */\n.product-list {\n  margin: 20px 0;\n}\n\n.product-card {\n  border: 1px solid #ddd;\n  border-radius: 8px;\n  padding: 16px;\n  margin-bottom: 16px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n.product-info h3 {\n  margin: 0 0 8px 0;\n}\n\n.price {\n  font-size: 1.2em;\n  font-weight: bold;\n  color: #2e7d32;\n  margin: 4px 0;\n}\n\n.description {\n  color: #666;\n  margin: 4px 0;\n}\n\n.category {\n  color: #888;\n  font-size: 0.9em;\n  margin: 4px 0;\n}\n\n.actions {\n  display: flex;\n  gap: 8px;\n}\n\n.product-list button {\n  padding: 8px 16px;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n  background: #1976d2;\n  color: white;\n}\n\n.product-list button.favorited {\n  background: #d32f2f;\n}\n\n/* CartDisplay Component Styles */\n.cart-display {\n  border: 1px solid #ddd;\n  border-radius: 8px;\n  padding: 16px;\n  margin: 20px 0;\n}\n\n.empty-message {\n  text-align: center;\n  color: #888;\n  font-style: italic;\n}\n\n.cart-item {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 12px 0;\n  border-bottom: 1px solid #eee;\n}\n\n.item-info h4 {\n  margin: 0 0 4px 0;\n}\n\n.cart-display .price {\n  color: #666;\n  margin: 0;\n}\n\n.quantity-controls {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n}\n\n.quantity {\n  min-width: 20px;\n  text-align: center;\n}\n\n.cart-summary {\n  border-top: 1px solid #ddd;\n  padding-top: 16px;\n  margin-top: 16px;\n}\n\n.total-price {\n  font-size: 1.2em;\n  font-weight: bold;\n  color: #2e7d32;\n}\n\n.cart-display button {\n  padding: 4px 8px;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n  background: #1976d2;\n  color: white;\n}\n\n.cart-display button.remove {\n  background: #d32f2f;\n}\n\n.cart-display button.clear-btn {\n  background: #f57c00;\n  padding: 8px 16px;\n}\n\n/* App Component Styles */\n.shopping-app {\n  max-width: 1200px;\n  margin: 0 auto;\n  padding: 20px;\n  font-family: Arial, sans-serif;\n}\n\nheader {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  border-bottom: 1px solid #ddd;\n  padding-bottom: 16px;\n  margin-bottom: 20px;\n}\n\n.cart-badge {\n  background: #1976d2;\n  color: white;\n  padding: 8px 16px;\n  border-radius: 20px;\n  font-weight: bold;\n}\n\nmain {\n  display: grid;\n  grid-template-columns: 2fr 1fr;\n  gap: 20px;\n}"},"answerFiles":{"src/app/app.css":"/* ProductList Component Styles */\n.product-list {\n  margin: 20px 0;\n}\n\n.product-card {\n  border: 1px solid #ddd;\n  border-radius: 8px;\n  padding: 16px;\n  margin-bottom: 16px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n.product-info h3 {\n  margin: 0 0 8px 0;\n}\n\n.price {\n  font-size: 1.2em;\n  font-weight: bold;\n  color: #2e7d32;\n  margin: 4px 0;\n}\n\n.description {\n  color: #666;\n  margin: 4px 0;\n}\n\n.category {\n  color: #888;\n  font-size: 0.9em;\n  margin: 4px 0;\n}\n\n.actions {\n  display: flex;\n  gap: 8px;\n}\n\n.product-list button {\n  padding: 8px 16px;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n  background: #1976d2;\n  color: white;\n}\n\n.product-list button.favorited {\n  background: #d32f2f;\n}\n\n/* CartDisplay Component Styles */\n.cart-display {\n  border: 1px solid #ddd;\n  border-radius: 8px;\n  padding: 16px;\n  margin: 20px 0;\n}\n\n.empty-message {\n  text-align: center;\n  color: #888;\n  font-style: italic;\n}\n\n.cart-item {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 12px 0;\n  border-bottom: 1px solid #eee;\n}\n\n.item-info h4 {\n  margin: 0 0 4px 0;\n}\n\n.cart-display .price {\n  color: #666;\n  margin: 0;\n}\n\n.quantity-controls {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n}\n\n.quantity {\n  min-width: 20px;\n  text-align: center;\n}\n\n.cart-summary {\n  border-top: 1px solid #ddd;\n  padding-top: 16px;\n  margin-top: 16px;\n}\n\n.total-price {\n  font-size: 1.2em;\n  font-weight: bold;\n  color: #2e7d32;\n}\n\n.cart-display button {\n  padding: 4px 8px;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n  background: #1976d2;\n  color: white;\n}\n\n.cart-display button.remove {\n  background: #d32f2f;\n}\n\n.cart-display button.clear-btn {\n  background: #f57c00;\n  padding: 8px 16px;\n}\n\n/* App Component Styles */\n.shopping-app {\n  max-width: 1200px;\n  margin: 0 auto;\n  padding: 20px;\n  font-family: Arial, sans-serif;\n}\n\nheader {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  border-bottom: 1px solid #ddd;\n  padding-bottom: 16px;\n  margin-bottom: 20px;\n}\n\n.cart-badge {\n  background: #1976d2;\n  color: white;\n  padding: 8px 16px;\n  border-radius: 20px;\n  font-weight: bold;\n}\n\nmain {\n  display: grid;\n  grid-template-columns: 2fr 1fr;\n  gap: 20px;\n}","src/app/app.ts":"import {Component, inject, ChangeDetectionStrategy} from '@angular/core';\nimport {CartStore} from './cart-store';\nimport {CartDisplay} from './cart-display';\n\n@Component({\n  selector: 'app-root',\n  imports: [CartDisplay],\n  template: `\n    <div class=\"shopping-app\">\n      <header>\n        <h1>Signals with Services Demo</h1>\n        <div class=\"cart-badge\">\n          Cart: {{ cartStore.totalQuantity() }} items (\\${{ cartStore.totalPrice() }})\n        </div>\n      </header>\n      \n      <main>\n        <cart-display></cart-display>\n      </main>\n    </div>\n  `,\n  styleUrl: './app.css',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class App {\n  cartStore = inject(CartStore);\n}\n","src/app/cart-display.ts":"import {Component, inject, ChangeDetectionStrategy} from '@angular/core';\nimport {CartStore} from './cart-store';\nimport {CartItem} from './cart-types';\n\n@Component({\n  selector: 'cart-display',\n  template: `\n    <div class=\"cart-display\">\n      <h2>Shopping Cart Demo</h2>\n\n      <!-- Add some products to test the cart -->\n      <div class=\"add-products\">\n        <h3>Add Products</h3>\n        <button (click)=\"addLaptop()\">Add Laptop ($999)</button>\n        <button (click)=\"addMouse()\">Add Mouse ($25)</button>\n        <button (click)=\"addKeyboard()\">Add Keyboard ($79)</button>\n      </div>\n\n      <h3>Cart Contents</h3>\n      @if (cartStore.cartItems().length === 0) {\n        <p class=\"empty-message\">Your cart is empty</p>\n      } @else {\n        <div class=\"cart-items\">\n          @for (item of cartStore.cartItems(); track item.id) {\n            <div class=\"cart-item\">\n              <div class=\"item-info\">\n                <h4>{{ item.name }}</h4>\n                <p class=\"price\">\\${{ item.price }} each</p>\n              </div>\n\n              <div class=\"quantity-controls\">\n                <button (click)=\"decreaseQuantity(item.id)\">-</button>\n                <span class=\"quantity\">{{ item.quantity }}</span>\n                <button (click)=\"increaseQuantity(item.id)\">+</button>\n                <button (click)=\"removeItem(item.id)\" class=\"remove\">Ã—</button>\n              </div>\n            </div>\n          }\n        </div>\n\n        <div class=\"cart-summary\">\n          <p>Total Items: {{ cartStore.totalQuantity() }}</p>\n          <p class=\"total-price\">Total: \\${{ cartStore.totalPrice() }}</p>\n          <button (click)=\"clearCart()\" class=\"clear-btn\">Clear Cart</button>\n        </div>\n      }\n    </div>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CartDisplay {\n  cartStore = inject(CartStore);\n\n  addLaptop() {\n    this.cartStore.addItem('1', 'Laptop', 999);\n  }\n\n  addMouse() {\n    this.cartStore.addItem('2', 'Mouse', 25);\n  }\n\n  addKeyboard() {\n    this.cartStore.addItem('3', 'Keyboard', 79);\n  }\n\n  increaseQuantity(id: string) {\n    const items = this.cartStore.cartItems();\n    const currentItem: CartItem | undefined = items.find((item: CartItem) => item.id === id);\n    if (currentItem) {\n      this.cartStore.updateQuantity(id, currentItem.quantity + 1);\n    }\n  }\n\n  decreaseQuantity(id: string) {\n    const items = this.cartStore.cartItems();\n    const currentItem = items.find((item: CartItem) => item.id === id);\n    if (currentItem && currentItem.quantity > 1) {\n      this.cartStore.updateQuantity(id, currentItem.quantity - 1);\n    }\n  }\n\n  removeItem(id: string) {\n    this.cartStore.removeItem(id);\n  }\n\n  clearCart() {\n    this.cartStore.clearCart();\n  }\n}\n","src/app/cart-store.ts":"import {Injectable, signal, computed} from '@angular/core';\nimport {CartItem} from './cart-types';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CartStore {\n  private items = signal<CartItem[]>([]);\n\n  // Readonly signals\n  readonly cartItems = this.items.asReadonly();\n\n  // Computed signals\n  readonly totalQuantity = computed(() => {\n    return this.items().reduce((sum, item) => sum + item.quantity, 0);\n  });\n\n  readonly totalPrice = computed(() => {\n    return this.items().reduce((sum, item) => sum + item.price * item.quantity, 0);\n  });\n\n  addItem(id: string, name: string, price: number) {\n    this.items.update((currentItems) => {\n      const existingItem = currentItems.find((item) => item.id === id);\n\n      if (existingItem) {\n        return currentItems.map((item) =>\n          item.id === id ? {...item, quantity: item.quantity + 1} : item,\n        );\n      } else {\n        return [...currentItems, {id, name, price, quantity: 1}];\n      }\n    });\n  }\n\n  removeItem(id: string) {\n    this.items.update((currentItems) => currentItems.filter((item) => item.id !== id));\n  }\n\n  updateQuantity(id: string, quantity: number) {\n    if (quantity <= 0) {\n      this.removeItem(id);\n      return;\n    }\n\n    this.items.update((currentItems) =>\n      currentItems.map((item) => (item.id === id ? {...item, quantity} : item)),\n    );\n  }\n\n  clearCart() {\n    this.items.set([]);\n  }\n}\n","src/app/cart-types.ts":"export interface CartItem {\n  id: string;\n  name: string;\n  price: number;\n  quantity: number;\n}\n"},"hiddenFiles":["BUILD.bazel","angular.json","package-lock.json","package.json.template","tsconfig.app.json","tsconfig.json","src/favicon.ico","src/index.html","src/main.ts","src/styles.css","src/assets/angular.svg","src/app/app.config.ts","package.json","idx/dev.nix","config.json","answer/src/app/app.css","answer/src/app/app.ts","answer/src/app/cart-display.ts","answer/src/app/cart-store.ts","answer/src/app/cart-types.ts"],"dependencies":{"@angular/common":"^20.1.0-next","@angular/compiler":"^20.1.0-next","@angular/core":"^20.1.0-next","@angular/forms":"^20.1.0-next","@angular/platform-browser":"^20.1.0-next","@angular/router":"^20.1.0-next","rxjs":"~7.8.0","tslib":"^2.3.0","zone.js":"~0.15.1","@angular/build":"^20.1.0-next","@angular/cli":"^20.1.0-next","@angular/compiler-cli":"^20.1.0-next","typescript":"~5.8.2"}}