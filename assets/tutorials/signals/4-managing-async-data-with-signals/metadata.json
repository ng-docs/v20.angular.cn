{"type":"editor","openFiles":["src/app/app.ts","src/app/user-api.ts","src/app/app.css"],"allFiles":["BUILD.bazel","angular.json","package-lock.json","package.json.template","tsconfig.app.json","tsconfig.json","src/favicon.ico","src/index.html","src/main.ts","src/styles.css","src/assets/angular.svg","src/app/app.config.ts","package.json","idx/dev.nix","config.json","src/app/app.css","src/app/app.ts","src/app/user-api.ts","answer/src/app/app.css","answer/src/app/app.ts","answer/src/app/user-api.ts"],"tutorialFiles":{"src/app/app.ts":"// TODO: Add the resource import from @angular/core\nimport {Component, signal, computed, ChangeDetectionStrategy} from '@angular/core';\nimport {loadUser} from './user-api';\n\n@Component({\n  selector: 'app-root',\n  template: `\n    <div>\n      <h2>User Profile Loader</h2>\n\n      <div>\n        <!-- TODO: Add (click) handlers to call loadUser() with appropriate IDs -->\n        <button>Load User 1</button>\n        <button>Load User 2</button>\n        <button>Load Invalid User</button>\n        <!-- TODO: Add (click) handler to call reloadUser() -->\n        <button>Reload</button>\n      </div>\n\n      <div class=\"status\">\n        <!-- TODO: Replace with @if blocks for loading, error, and success states -->\n        <!-- Use isLoading(), hasError(), and userResource.hasValue() -->\n        <!-- For loading: show \"Loading user...\" -->\n        <!-- For error: show error message with userResource.error()?.message -->\n        <!-- For success: show user name and email from userResource.value() -->\n        <p>Click a button to load user data</p>\n      </div>\n    </div>\n  `,\n  styleUrl: './app.css',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class App {\n  // TODO: Create a signal for userId\n  // TODO: Create a resource for user data\n  // TODO: Create computed signals for resource states\n  // TODO: Add loadUser method\n  // TODO: Add reloadUser method\n}\n","src/app/user-api.ts":"// Mock API function for loading user data\nexport async function loadUser(id: number): Promise<{name: string; email: string}> {\n  // Simulate network delay\n  await new Promise((resolve) => setTimeout(resolve, 1000));\n\n  // Simulate potential errors\n  if (id === 999) {\n    throw new Error('User not found');\n  }\n\n  return {\n    name: `User ${id}`,\n    email: `user${id}@example.com`,\n  };\n}\n","src/app/app.css":":host {\n  color: #333;\n  font-family: Arial, sans-serif;\n  display: block;\n  padding: 20px;\n}\n\nbutton {\n  margin: 0 5px 10px 0;\n  padding: 8px 16px;\n  font-size: 16px;\n  cursor: pointer;\n}\n\n.status {\n  margin-top: 20px;\n  padding: 20px;\n  border: 1px solid #ddd;\n  border-radius: 4px;\n}\n\n.error {\n  color: #d32f2f;\n}\n\n.user-info {\n  color: #2e7d32;\n}\n\n.user-info h3 {\n  margin: 0 0 10px 0;\n}\n\n.user-info p {\n  margin: 0;\n}"},"answerFiles":{"src/app/app.css":":host {\n  color: #333;\n  font-family: Arial, sans-serif;\n  display: block;\n  padding: 20px;\n}\n\nbutton {\n  margin: 0 5px 10px 0;\n  padding: 8px 16px;\n  font-size: 16px;\n  cursor: pointer;\n}\n\n.status {\n  margin-top: 20px;\n  padding: 20px;\n  border: 1px solid #ddd;\n  border-radius: 4px;\n}\n\n.error {\n  color: #d32f2f;\n}\n\n.user-info {\n  color: #2e7d32;\n}\n\n.user-info h3 {\n  margin: 0 0 10px 0;\n}\n\n.user-info p {\n  margin: 0;\n}","src/app/app.ts":"import {Component, signal, computed, resource, ChangeDetectionStrategy} from '@angular/core';\nimport {loadUser} from './user-api';\n\n@Component({\n  selector: 'app-root',\n  template: `\n    <div>\n      <h2>User Profile Loader</h2>\n      \n      <div>\n        <button (click)=\"loadUser(1)\">Load User 1</button>\n        <button (click)=\"loadUser(2)\">Load User 2</button>\n        <button (click)=\"loadUser(999)\">Load Invalid User</button>\n        <button (click)=\"reloadUser()\">Reload</button>\n      </div>\n      \n      <div class=\"status\">\n        @if (isLoading()) {\n          <p>Loading user...</p>\n        } @else if (hasError()) {\n          <p class=\"error\">Error: {{ userResource.error()?.message }}</p>\n        } @else if (userResource.hasValue()) {\n          <div class=\"user-info\">\n            <h3>{{ userResource.value().name }}</h3>\n            <p>{{ userResource.value().email }}</p>\n          </div>\n        }\n      </div>\n    </div>\n  `,\n  styleUrl: './app.css',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class App {\n  userId = signal(1);\n\n  userResource = resource({\n    params: () => ({id: this.userId()}),\n    loader: (params) => loadUser(params.params.id),\n  });\n\n  isLoading = computed(() => this.userResource.status() === 'loading');\n  hasError = computed(() => this.userResource.status() === 'error');\n\n  loadUser(id: number) {\n    this.userId.set(id);\n  }\n\n  reloadUser() {\n    this.userResource.reload();\n  }\n}\n","src/app/user-api.ts":"// Mock API function for loading user data\nexport async function loadUser(id: number): Promise<{name: string; email: string}> {\n  // Simulate network delay\n  await new Promise((resolve) => setTimeout(resolve, 1000));\n\n  // Simulate potential errors\n  if (id === 999) {\n    throw new Error('User not found');\n  }\n\n  return {\n    name: `User ${id}`,\n    email: `user${id}@example.com`,\n  };\n}\n"},"hiddenFiles":["BUILD.bazel","angular.json","package-lock.json","package.json.template","tsconfig.app.json","tsconfig.json","src/favicon.ico","src/index.html","src/main.ts","src/styles.css","src/assets/angular.svg","src/app/app.config.ts","package.json","idx/dev.nix","config.json","answer/src/app/app.css","answer/src/app/app.ts","answer/src/app/user-api.ts"],"dependencies":{"@angular/common":"^20.1.0-next","@angular/compiler":"^20.1.0-next","@angular/core":"^20.1.0-next","@angular/forms":"^20.1.0-next","@angular/platform-browser":"^20.1.0-next","@angular/router":"^20.1.0-next","rxjs":"~7.8.0","tslib":"^2.3.0","zone.js":"~0.15.1","@angular/build":"^20.1.0-next","@angular/cli":"^20.1.0-next","@angular/compiler-cli":"^20.1.0-next","typescript":"~5.8.2"}}